***************
*** 745,750 ****
        dfs.close();
      } finally {
        System.out.println("testFsClose successful");
      }
    }
  }
--- 745,797 ----
        dfs.close();
      } finally {
        System.out.println("testFsClose successful");
+       cluster.shutdown();
      }
    }
+ 
+   // test closing file after cluster is shutdown
+   public void testFsCloseAfterClusterShutdown() throws IOException {
+     System.out.println("test testFsCloseAfterClusterShutdown start");
+     final int DATANODE_NUM = 3;
+ 
+     Configuration conf = new Configuration();
+     conf.setInt("dfs.replication.min", 3);
+     conf.setBoolean("ipc.client.ping", false); // hdfs timeout is default 60 seconds
+     conf.setInt("ipc.ping.interval", 10000); // hdfs timeout is now 10 second
+ 
+     // create cluster
+     MiniDFSCluster cluster = new MiniDFSCluster(conf, DATANODE_NUM, true, null);
+     DistributedFileSystem dfs = null;
+     try {
+       cluster.waitActive();
+       dfs = (DistributedFileSystem)cluster.getFileSystem();
+ 
+       // create a new file.
+       final String f = DIR + "dhrubashutdown";
+       final Path fpath = new Path(f);
+       FSDataOutputStream out = TestFileCreation.createFile(dfs, fpath, DATANODE_NUM);
+       out.write("something_dhruba".getBytes());
+       out.sync();    // ensure that block is allocated
+ 
+       // shutdown last datanode in pipeline.
+       cluster.stopDataNode(2);
+ 
+       // close file. Since we have set the minReplcatio to 3 but have killed one
+       // of the three datanodes, the close call will loop until the hdfsTimeout is
+       // encountered.
+       boolean hasException = false;
+       try {
+         out.close();
+         System.out.println("testFsCloseAfterClusterShutdown: Error here");
+       } catch (IOException e) {
+         hasException = true;
+       }
+       assertTrue("Failed to close file after cluster shutdown", hasException);
+     } finally {
+       System.out.println("testFsCloseAfterClusterShutdown successful");
+       if (cluster != null) {
+         cluster.shutdown();
+       }
+     }
+   }
  }
